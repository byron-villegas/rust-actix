name: CI/CD

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: rust:1.87.0
    steps:
      - uses: actions/checkout@v4
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Build Release
        run: cargo build --release
  unit-test:
    needs: [ build ]
    runs-on: ubuntu-latest
    container:
      image: rust:1.87.0
    steps:
      - uses: actions/checkout@v4
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Build Release
        run: cargo build --release
      - name: Install Cargo llvm For Coverage
        run: cargo install cargo-llvm-cov
      - name: Run Tests With Coverage With Console Report
        run: cargo llvm-cov --ignore-filename-regex "_dto.rs|main.rs|_steps.rs"
      - name: Run Tests With Coverage With HTML Report
        run: cargo llvm-cov --ignore-filename-regex "_dto.rs|main.rs|_steps.rs" --html
      - uses: actions/upload-artifact@v4
        with:
          name: llvm-cov
          path: target/llvm-cov/html
      - name: Run Tests With Coverage With XML Report
        run: cargo llvm-cov --ignore-filename-regex "_dto.rs|main.rs|_steps.rs" --cobertura --output-path "cobertura.xml"
      - name: Code Coverage Summary Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: cobertura.xml
          badge: true
          fail_below_min: true
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: '80'
  deploy:
    needs: [ build, unit-test ]
    runs-on: ubuntu-latest
    env:
      RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}
    steps:
      - name: Deploy With Hook
        run: curl -X POST $RENDER_DEPLOY_HOOK > deploy.json
      - uses: actions/upload-artifact@v4
        with:
          name: deploy
          path: deploy.json
      - name: Sleep By Three Minutes
        run: sleep 180
  acceptance-test:
    needs: [ deploy ]
    runs-on: ubuntu-latest
    env:
      API_HOST: "https://rust-actix-luup.onrender.com/api"
    container:
      image: rust:1.87.0
    steps:
      - uses: actions/checkout@v4
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Build Release
        run: cargo build --release
      - name: Run Acceptance Tests
        run: cargo run --bin cucumber
      - uses: actions/upload-artifact@v4
        with:
          name: Cucumber Report XML
          path: cucumber-report.xml
      - uses: actions/upload-artifact@v4
        with:
          name: Cucumber Report JSON
          path: cucumber-report.json
  performance-test-goose:
    needs: [ acceptance-test ]
    runs-on: ubuntu-latest
    container:
      image: rust:1.87.0
    steps:
      - uses: actions/checkout@v4
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Build Release
        run: cargo build --release
      - name: Run Performance Tests With Goose
        run: cargo run --bin goose -- --host https://rust-actix-luup.onrender.com/api/ --users 10 --run-time 10s --report-file=goose-report.html --no-reset-metrics
      - uses: actions/upload-artifact@v4
        with:
          name: Goose Report HTML
          path: goose-report.html

        